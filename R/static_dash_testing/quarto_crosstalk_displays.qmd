---
title: "COCA Reports - Static Page Development"
author: "Adam Kemberling"
url: "https://github.com/adamkemberling"
affiliation: "Gulf of Maine Research Institute"
affiliation_url: "https://www.gmri.org"
description: | 
  Testing non-shiny interactive displays
date: "Updated on: `r Sys.Date()`"
format: 
  html:
    toc: true
    self-contained: true
    bslib: true
    fig-dpi: 300
execute: 
  echo: false
  warning: false
  message: false
  comment: ""
  fig.align: center
---

```{r}
#| label: packages
#| include: false
#| echo: false
#| warning: false

####  Packages  ####
{
  library(here)
  library(rnaturalearth)
  library(scales)
  library(sf)
  library(gmRi)
  library(gt)
  library(gtExtras)
  library(patchwork)
  library(tidyverse)
  library(showtext)
  library(crosstalk)
  library(shiny)
  library(bslib)
  library(plotly)
  library(rcartocolor)
}

# Namespace Conflicts
conflicted::conflict_prefer("select", "dplyr")
conflicted::conflict_prefer("filter", "dplyr")

# Project paths
mills_path <- cs_path(box_group = "mills")
project_box_path <- str_c(mills_path, "Projects/COCA19_Projections/")
projection_res_path <- paste0(project_box_path, "projections/")

# Path to the directory containing the font file (replace with your actual path)
font_dir <- paste0(system.file("stylesheets", package = "gmRi"), "/GMRI_fonts/Avenir/")

# Register the font
font_add(
  family = "Avenir",
  file.path(font_dir, "LTe50342.ttf"),
  bold = file.path(font_dir, "LTe50340.ttf"),
  italic = file.path(font_dir, "LTe50343.ttf"),
  bolditalic = file.path(font_dir, "LTe50347.ttf"))

# Load the font
showtext::showtext_auto()

# Degree symbol
deg_c <- "\u00b0C"


# Fix Species names:
name_fix <- tribble(
  ~"species",              ~"comname",
  "atlanticmackerel",      "Atlantic mackerel",              
  "butterfish",            "butterfish",     
  "blackseabass",          "black sea bass",
  "cod",                   "Atlantic cod",              
  "haddock",               "haddock",             
  "hagfish",               "hagfish",                
  "halibut",               "halibut",                
  "herring",               "herring",               
  "jonahcrab",             "Jonah crab",                
  "littleskate",           "little skate",                
  "lobster",               "American lobster",               
  "longfinsquid",          "longfin squid",                
  "monkfish",              "monkfish",                
  "northernsandlance",     "northern sandlance",               
  "oceanquahog",           "ocean quahog",                
  "pollock",               "pollock",      
  "plaice",                "American plaice",
  "reddeepseacrab",        "red deepsea crab",      
  "redfish",               "acadian redfish",
  "redhake",               "red hake",                
  "rockcrab",              "rock crab",               
  "scallop",               "scallop",              
  "scup",                  "scup",               
  "shortfinsquid",         "shortfin squid",               
  "silverhake",            "silver hake",              
  "smoothskate",           "smooth skate",               
  "spinydogfish",          "spiny dogfish",               
  "summerflounder",        "summer flounder",              
  "thornyskate",           "thorny skate",               
  "whitehake",             "white hake",               
  "windowpaneflounder",    "windowpane flounder",              
  "winterflounder",        "winter flounder",               
  "winterskate",           "winter skate",                
  "witchflounder",         "witch flounder",              
  "yellowtailflounder",    "yellowtail flounder"             
)



# Year key for text and plot labeling
horizon_year_key_df <- tribble(
  ~"scenario",    ~"horizon",  ~"xmin",  ~"xmax",
  "CMIP6_SSP1_26",  "0C",      2010,     2019,
  "CMIP6_SSP1_26",  "0.5C",    2048,     2052,
  "CMIP6_SSP1_26",  "1C",      2048,     2052,
  "CMIP6_SSP1_26",  "1.5C",    2048,     2052,
  "CMIP6_SSP1_26",  "2C",      2048,     2052,
  "CMIP6_SSP1_26",  "3C",      2048,     2052,
  "CMIP6_SSP1_26",  "4C",      2048,     2052,
  "CMIP6_SSP5_85",  "0C",      2010,     2019,
  "CMIP6_SSP5_85",  "0.5C",    2034,     2038,
  "CMIP6_SSP5_85",  "1C",      2042,     2045,
  "CMIP6_SSP5_85",  "1.5C",    2054,     2058,
  "CMIP6_SSP5_85",  "2C",      2064,     2068,
  "CMIP6_SSP5_85",  "3C",      2077,     2081,
  "CMIP6_SSP5_85",  "4C",      2095,     2099)



# Names of species
species_opts <- sort(unique(name_fix$comname))
species_opts <- setNames(species_opts, str_to_title(species_opts))

#  SSP scenarios
scenario_opts <- c(
  "Fossil-Fueled Development" = "CMIP6_SSP5_85",
  "Sustainable Development" = "CMIP6_SSP1_26"
  )

# Temperatures Above Modern Climate
horizon_vals <- c(0.5, 1, 1.5, 2, 2, 3, 4)
horizon_opts  <-  str_c(horizon_vals, "C")
horizon_opts <- setNames(horizon_opts, str_c("+", horizon_vals, deg_c))


# Mirror the app functionality
input <- list(
  in_species = species_opts[["Haddock"]],
  in_scenario = scenario_opts[[1]],
  in_horizon = horizon_opts[[2]]
)

# App functions
source(here::here("Coca_SDM_app_dev/app_functions/coca_application_funs.R")) # Plotting functions
```


```{r}
#| label: style-sheet
#| results: asis

# Use GMRI style
use_gmri_style_rmd()

```



# Mimicing Shiny with Quarto + bslib

It was discussed in the last COCA meeting that we need some sort of static display options as an alternative to the shiny app.

An alternative display option that mimics 80% of the functionality is to blend web-based UI displays from {bslib} with some light interactivity that can be hosted as a static webpage.

Here are the components that I'm thinking of:\
  1. bslib for cards: these create a modern look that would be consistent with shiny. Use these to hold and frame content.\
  2. crosstalk + ggplot: These two packages together can add interactivity to a static page. If we're smart about the data we need, we can mimic the shiny app functionality but keep it light.\
  3. Observable.js, there is also an option to build plots/tables/charts with observable for interactivity as well\
  
Another interesting but time consuming path would be to try out observable framework:
https://observablehq.com/framework/
  

# Content Goals


The following lines are notes from Kat:\
* Make a heading on the front baseline page about what this page is generally about, why am I here. Heading and two sentences\
* Could not publish yet\
* Could just make a mini app with two maps of change with different temp thresholds\
* Be specific on what does say and doesn’t say (e.g. stock recovery status, ecological interactions)\
* Explaining what a model does and doesn’t do - need a read me on the app\
* Explaining biomass - better connect to habitat. Habitat suitability that support biomass or something similar. habitat potential/suitability \
* Baseline and future maps probably most useful \ 
  
  
  
## Content Cards: bslib

bslib uses the newest bootstrap ui library to generate modern html containers for storing content. The major design element is the content "card".



## Interactive Data: crosstalk

Crosstalk adds reactivity to static pages along users to select and filter data. Brushing can also be used to highlight data across plots highlighting different dimensions of the same dataset.



## Observable Interactivity

Observable.js can also be used directly to highlight data interactively without stringing along different r packages.


# Actual Content:



Put actual ideas for content here.

```{r}
# # These timeseries are pretty useful, going to save them out for use elsewhere:
# 
mills_path <- cs_path(box_group = "mills")
projection_res_path <- str_c(mills_path, "Projects/COCA19_Projections/data/bias_corrected_env_projections/")
# 
# # Baseline Period Data
references_combined <-  read_csv(str_c(projection_res_path, "oisst_soda_regional_timeseries.csv"))
# 
# # SSP scenario for regions
ssps_corrected <-  read_csv(str_c(projection_res_path, "bias_corrected_ssps_regional_timeseries.csv"))



# Build an intersting plot in plotly
references_combined <- references_combined %>% filter(Region == "US Survey Area")
ssps_corrected <- ssps_corrected %>% filter(Region == "US Survey Area")

# Observational Data
obs_annual <- references_combined  %>% 
  group_by(year) %>% 
  summarise(across(c(surf_temp, bot_temp, surf_sal, bot_sal), mean)) %>% 
  ungroup() 

# Wide sst, both scenarios
ssp_sst_wide <- ssps_corrected %>% 
  filter(variable == "Surface Temperature") %>% 
  group_by(scenario, year, variable) %>% 
  summarise(
    across(
      c(`5th Percentile`, `95th Percentile`, `Ensemble Mean`), 
      ~mean(.x, na.rm = T))) %>% 
  ungroup()


# Wide ssp5 sst
ssp5_wide_sst <- ssps_corrected %>% 
  filter(scenario == "SSP5: 8.5", 
         variable == "Surface Temperature") %>% 
  group_by(year, variable) %>% 
  summarise(
    across(
      c(`5th Percentile`, `95th Percentile`, `Ensemble Mean`), 
      ~mean(.x, na.rm = T))) %>% 
  ungroup()


# Labels for key thresholds on the SST projection

label_df <- filter(ssp5_wide_sst, year %in% c(2045, 2062, 2081, 2099)) %>% 
  mutate(
    label = case_when(
      year == 2045 ~ str_c("+1", deg_c),
      year == 2062 ~ str_c("+2", deg_c),
      year == 2081 ~ str_c("+3", deg_c),
      year == 2099 ~ str_c("+4", deg_c)), 
    y = `Ensemble Mean`,
    x = year)
```


## 1. Regional Climate Projections from SSP Scenarios 



```{r}
sst_scenario_comparison <- ggplot(ssp_sst_wide) +
  geom_line(
    data = ssp_sst_wide %>% filter(scenario == "SSP1: 2.6"),
    aes(year, `Ensemble Mean`, color = scenario),
    linewidth = 1, key_glyph = "timeseries") +
  geom_ribbon(
    aes(year, ymin = `5th Percentile`, ymax = `95th Percentile`, fill = scenario ),
    color = "transparent", alpha = 0.2) +
  geom_line(
    data = ssp_sst_wide %>% filter(scenario == "SSP5: 8.5"),
    aes(year, `Ensemble Mean`, color = scenario),
    linewidth = 1, key_glyph = "timeseries"
  ) +
  scale_fill_gmri() +
  scale_color_gmri() +
  scale_x_continuous(limits = c(1950, 2104),
                     expand = expansion(add = c(0,0))) +
  guides(
    color = guide_legend(
      order = 1, nrow = 2, title.position = "top", title.hjust = 0.5),
    fill = guide_legend(
      order = 2, title.position = "top", title.hjust = 0)) +
  theme_gmri() +
  labs(fill = "Range in Model Run Uncertainty\n(5th-95th Percentiles)", 
       color = "SSP Scenario\nEnsemble Mean", 
       fill = "Ensemble Uncertainty 5th/9th Percentile Range", 
       x = "Year", 
       y = str_c("Annual Sea Surface Temperature"),
       subtitle = "Northeast U.S.",
       title = "Projected SST Under Ensemble Climate Scenarios") +
  theme(legend.box = "horizontal",
        legend.box.background = element_rect(color = "black"),
        legend.title = element_text(size = 14, family = "Avenir"),
        legend.text = element_text(size = 12, family = "Avenir"),
        legend.position = c(0.25, .81),
        axis.title = element_text(size = 14, family = "Avenir"),
        axis.text = element_text(size = 12, family = "Avenir"),
        plot.title = element_text(size = 16, family = "Avenir"),
        plot.subtitle = element_text(size = 14, family = "Avenir"),
        strip.text = element_text(family = "Avenir"))

# showtext::showtext_opts(dpi=300)
# ggsave(
#   plot = sst_scenario_comparison,
#   filename = here::here("R/static_dash_testing/dash_img/ssp_scenario_compare_sst_projection.png"),
#   dpi = 300,
#   bg = "white",
#   width = 5.4,
#   height = 2.5,
#   units = "in", scale = 2)
  
```



```{r}


# 1. Content Card from shiny modules:
setwd(here::here("R/static_dash_testing")) # Only need this when working in the script

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      class = "bg-dark",
      "Understanding Community Climate Trends"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("CMIP6 scenario projections for the Northeastern US:"),

      # This is where the focal element goes:
      card_body(
        p("
          In the research presented here, we used future sea surface
          and bottom temperature data from multiple global climate
          models run under two scenarios reflecting low (SSP1-2.6) and
          high greenhouse gas emissions (SSP5-8.5). A prediction
          ensemble of many model runs was prepared for each
          scenario."),
          
        p("
          The chart below shows the projected SST for the Northeast
          U.S. region as a whole. The breadth of uncertainty between
          model runs can be seen in the prediction range when taking
          the 5th and 95th percentiles of the model runs used in each 
          ensemble."),
        p("
          The projected Oceanographic responses under these scenarios
          and their uncertainties begin to diverge by mid-century
          (2040-2069), but the differences are most apparent at the 
          end of the century (2070-2099)."),

        # Central Display - takes html:
        card_image(file = "dash_img/ssp_scenario_compare_sst_projection.png")

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Projected distributions not based on stock recovery status
      or any ecological interactions.")
  ) # Close the card

```


## 2. Observed & Projected Environmental Change from SSP5 8.5

```{r}


# Plot where real life sits against the climate models
us_ssp85_sst_projections <- ggplot() +
  # Confidence Intervals
  geom_ribbon(
    data = ssp5_wide_sst,
    aes(x = year, ymin = `5th Percentile`, ymax = `95th Percentile`, 
        fill = "SSP5: 8.5"),
    color = "white", alpha = 0.2) +
  geom_line(
    data = ssp5_wide_sst,
    aes(year, `Ensemble Mean`, color = "SSP5: 8.5"),
    linewidth = 0.8, key_glyph = "timeseries") +
  # Observational Data
  geom_line(
    data = obs_annual, 
    aes(year, surf_temp, color = "Observed"),
    linewidth = 1, key_glyph = "timeseries") +
  # Threshold labels:
  # threshold error
  geom_point(
    data = label_df,
    aes(x, y), shape = "|", size = 4) +
  geom_text(
    data = label_df, size =5,
    aes(x,y, label = label), fontface = "bold", vjust = -1) +
  scale_fill_gmri(reverse = T) +
  scale_color_manual(values = c("black", gmri_cols("orange"))) +
  scale_x_continuous(limits = c(1980, 2104),
                     expand = expansion(add = c(0,0))) +
  scale_y_continuous(labels = scales::label_number(suffix = deg_c)) +
  theme_gmri() +
  guides(
    color = guide_legend(
      order = 1, nrow = 2, title.position = "top", title.hjust = 0.5), 
    fill = guide_legend(
      order = 2, title.position = "top", title.hjust = 0)) +
  labs(fill = "Range of Climate Model Uncertainty\n(5th-95th Percentiles)", 
       color = "SST:", 
       x = "Year", 
       y = str_c("Average Annual Sea Surface Temperature"),
       subtitle = "Northeast U.S.",
       title = "Observed and Projected SST Under Ensemble Climate Scenario") +
  theme(legend.box = "horizontal",
        legend.box.background = element_rect(color = "black"),
        legend.title = element_text(size = 14, family = "Avenir"),
        legend.text = element_text(size = 12, family = "Avenir"),
        legend.position = c(0.25, .81),
        axis.title = element_text(size = 14, family = "Avenir"),
        axis.text = element_text(size = 12, family = "Avenir"),
        plot.title = element_text(size = 16, family = "Avenir"),
        plot.subtitle = element_text(size = 14, family = "Avenir"),
        strip.text = element_text(family = "Avenir"))



# showtext::showtext_opts(dpi=300)
# ggsave(
#   plot = us_ssp85_sst_projections,
#   filename = here::here("R/static_dash_testing/dash_img/ssp5_sst_projection.png"),
#   dpi = 300,
#   bg = "white",
#   width = 5.4,
#   height = 2.5,
#   units = "in", scale = 2)
```




```{r}
#| label: card-ssp-vs-observed


# 1. Content Card from shiny modules:
setwd(here::here("R/static_dash_testing")) # Only need this when working in the script

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      class = "bg-dark",
      "Understanding Community Climate Trends"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("CMIP6 scenario projections for the Northeastern US:"),

      # This is where the focal element goes:
      card_body(
        p("These climate ensembles contain estimates of temperature
          and salinity conditions at monthly intervals projected
          out through 2100. Estimates are based on decades of
          scientific observations in the region and projected 
          forward using physics-based oceanographic models. 
          These models are then fed data on expected GHG
          emissions and climate sensitivity to those emissions
          unique to each SSP scenario to see how the physical
          environment  responds under those assumptions."),
          p("
            These estimates are then used to set reasonable expectations,
            and test our understanding around the projected changes
            to the region's environment. Differences between scenarios and
          their uncertainties highlight how much/little change we
          might anticipate dependent on choices made on emissions."),
         p("
           The chart below displays the projected change in sea surface
          temperature for the Northeast US Continental Shelf Region, based
          on the shared socioeconomic emissons pathway SSP5 8.5,
          an ensemble climate scenario."),

        # Central Display - takes html:
        card_image(file = "dash_img/ssp5_sst_projection.png")

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Projected distributions not based on stock recovery status
      or any ecological interactions.")
  ) # Close the card

```


## 3. Baseline Environmental Conditions of the Recent Climate

```{r}
# Make a Plot highlighting changes in the environment over time
ref_timeseries <- references_combined %>%
  rename(
    `Sea Surface Salinity` = surf_sal, 
    `Sea Surface Temperature` = surf_temp, 
    `Sea Bottom Salinity` = bot_sal, 
    `Sea Bottom Temperature` = bot_temp) %>% 
  pivot_longer(
    cols = c(
      `Sea Surface Salinity`, `Sea Surface Temperature`, 
      `Sea Bottom Salinity`, `Sea Bottom Temperature`),
    names_to = "var",
    values_to = "vals") %>% 
  #  group_by(Date = year, var) %>% 
  # summarise(vals = mean(vals),
  #           .groups = "drop") %>% 
    mutate(
      var = factor(var, levels = c(
        "Sea Surface Temperature", "Sea Surface Salinity",
        "Sea Bottom Temperature", "Sea Bottom Salinity")),
      Date = as.Date(str_c(year, month, "01", sep = "-")),
      var_type = ifelse(str_detect(var, "Salinity"), "Salinity", "Temperature"),
      var_col = ifelse(var_type == "Salinity", "#00736D", "#00608A"),
      opacity = ifelse(str_detect(var, "Surface"), 1, 0.6),
      vals = round(vals, 2)) %>% 
  
  group_by(var) %>%
  do(
    p = plot_ly(
      ., 
      x = ~Date, 
      y = ~vals, 
      legendgroup = ~var_type,
      opacity = ~opacity,
      type = "scatter", 
      mode = "lines",
      color = ~I(var_col),
      name = ~var
      )) %>%
  subplot(nrows = 2, shareX = TRUE, shareY = FALSE, margin = 0.05) %>%
  plotly::layout(
    legend = list(
      orientation = "h",   # show entries horizontally
      xanchor = "center",  # use center of legend as anchor
      yanchor = "bottom",
      x = 0.5,
      y = -0.3),             # put legend in center of x-axis
    title = "Observed Environmental Variability of the Northeast Shelf")

```



```{r}
#| label: env-conditions-card

# 1. Content Card from shiny modules:

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      #class = "bg-dark",
      "Anchoring Comparisons Against Known Experiences"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("Environmnetal Change History of the Northeastern US:"),

      # This is where the focal element goes:
      card_body(height = 800,
        p("In the Northeast US the physical marine environment changes
          at scales ranging from the hourly to decadal scales.
          The marine environment is dynamic and inter-annual variation
          is normal and expected regardless of climate change impacts."),
        p("By taking several decades of data to use as a baseline,
           scientists can measure the degree that each variable 
           fluctuates naturally, and set benchmarks from which 
          to compare against."),

        # Central Display - takes html:
        # # Plotly works here:
        ref_timeseries

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Environmental conditions for the region are both directly observed and recreated via ocean reanalysis models.")
  ) # Close the card

```




## 4. Observed Species Distribution: Modern Climate

```{r}


# Hexagonal grid simple feature geometry
#hex_grid <- read_sf(here::here("Data/spatial/hex_grid.geojson"))
hex_grid <- read_sf(
  here::here("Coca_SDM_app_dev/app_ready_data/hex_grid.geojson"))



# Load the decadal milestone summaries
horizon_projections <- read_csv(
  here::here("Data/projections/Cmilestones_all_species_test.csv"),
  col_types = cols(
    var = col_character(),
    ref_period = col_character(),
    temp_horizon = col_character(),
    species = col_character(),
    scenario = col_character(),
    pt_id = col_double(),
    val = col_double()))  %>% 
  left_join(name_fix, by = join_by(species)) %>% 
  filter(str_detect(var, "_mu")) %>% 
  filter(comname == input$in_species)




# Data on mean projections for different regions
density_timeseries <- read_csv(
  file = here::here("Coca_SDM_app_dev/app_ready_data/projected_densities_timeseries.csv"),
  col_types = list(
    species = col_character(),
    comname = col_character(),
    scenario = col_character(),
    region = readr::col_factor(levels = c("Scotian Shelf", "Gulf of Maine", "Georges Bank", "Mid-Atlantic Bight")), 
    year = col_double(),
    season = col_character(),
    avg_dens = col_double()))  %>% 
  filter(comname == input$in_species)





```



```{r}
#| label: haddock-baseline-prep

# Get the baseline projection
base_df <- horizon_projections %>% 
  dplyr::filter(temp_horizon == "0C") %>%
  filter(scenario == input$in_scenario) %>%
  left_join(hex_grid, by = join_by(pt_id))



# Make a map of the baseline distribution
haddock_maseline_map <- ssp_proj_map(
  dist_df = base_df, 
  reactive = F, 
  add_labels = F) +
  labs(title = "Haddock Average Biomass Density (2010-2019)")




# # Save
# showtext::showtext_opts(dpi=300)
# ggsave(
#   plot = haddock_maseline_map,
#   filename = here::here("R/static_dash_testing/dash_img/haddock_baseline_plot.png"),
#   dpi = 300,
#   bg = "white",
#   width = 5.4,
#   height = 2.5,
#   units = "in", scale = 2)





# # Maybe Add a bargraph of relative biomass in the labeled areas?
# density_timeseries %>% 
#   filter(year %in% c(2010:2019),
#          scenario == "CMIP6_SSP5_85") %>% 
#   group_by(species, scenario, region, season) %>% 
#   summarise(avg_dens = mean(avg_dens),
#             .groups = "drop") %>% 
#   mutate(season = factor(
#     season,
#     levels = c("Spring", "Summer", "Fall", "Annual Average")),
#     season = fct_rev(season)) %>% 
#   ggplot(
#     aes(x = avg_dens, 
#         y = season, 
#         fill = region)) +
#   geom_col(position = "dodge") +
#   facet_grid(scenario~species) +
#   scale_fill_gmri() +
#   labs(y = NULL, x = "Average Biomass Density")

```




```{r}
#| label: haddock-baseline-card


# 1. Content Card from shiny modules:

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      #class = "bg-dark",
      "Species Abundance in the Ocean Varies with Environmental Suitability"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("Haddock Preferences Have Determined Historic Species Distribution"),

      # This is where the focal element goes:
      card_body(
        p("With a preference for cooler water, haddock have historically been more numerous in the Gulf of Maine, becomin less numerousfurther to the South."),
        p("For comparisons against projected future climates, we've used the ten-year period of 2010-2019 as a baseline from which to measure changes."),
        p("The following map below displays how our species distribution model allocates haddock biomass density when given the average environmental conditions of that 2010-2019 period. This is how we understand haddock abundance/biomass to be distributed currently under the average environmental conditions of recent years."),

        # Central Display - takes html:
        # # Plotly works here:
        card_image(file = "dash_img/haddock_baseline_plot.png")

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Baseline period species distributions above are the average between the three survey seasons from which abundance information are available.")
  ) # Close the card

```





## 5. Projected Distribution Change in a +1C Climate

```{r}

# Load the decadal milestone summaries
horizon_projections <- read_csv(
  here::here("Data/projections/Cmilestones_all_species_test.csv"),
  col_types = cols(
    var = col_character(),
    ref_period = col_character(),
    temp_horizon = col_character(),
    species = col_character(),
    scenario = col_character(),
    pt_id = col_double(),
    val = col_double()))  %>% 
  left_join(name_fix, by = join_by(species)) %>% 
  filter(str_detect(var, "_mu"))  %>% 
  filter(comname == input$in_species)


# Get the projected distribution
projected_df <- horizon_projections %>% 
  dplyr::filter(temp_horizon == "1C") %>%
  filter(scenario == input$in_scenario) %>%
  left_join(hex_grid, by = join_by(pt_id))

# Get the difference
diff_df <- get_difference(base_dat = base_df, proj_dat = projected_df)


# Make a map of the baseline distribution
#ssp_proj_map(dist_df = projected_df, reactive = F, add_labels = F)
haddock_change_map <- ssp_difference_map(
  dist_df = diff_df, 
  reactive = F) +
  labs(title = str_c("Change in Haddock Biomass Density at +1", deg_c))


# showtext::showtext_opts(dpi=300)
# ggsave(
#   plot = haddock_change_map,
#   filename = here::here("R/static_dash_testing/dash_img/haddock_change_plot.png"),
#   dpi = 300,
#   bg = "white",
#   width = 5.4,
#   height = 2.5,
#   units = "in", scale = 2)


```



```{r}
#| label: haddock-change-card


# 1. Content Card from shiny modules:

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      #class = "bg-dark",
      "Projected Species Distribution Change Under Projected Climate Change"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("Habitat Preference-Based Species Distribution Changes"),

      # This is where the focal element goes:
      card_body(
        p("Based on the projected environment of the SSP5 8.5 climate ensemble. Haddock distributions are projected
          to decline in the southern parts of their range, and increase North of Georges Bank and along the Scotian Shelf.
          These projected changes raise a number of ecological and fisheries management considerations."),
        p("Changes in distribution driven by shifts in the local climate will change the vulnerability of
          haddock to fishing pressure and add complexity to stock the assesment process."),
         p("These habitat-driven distribution shifts will also need to be balanced against
           the ecological and life-history needs for the species. Historical distribution patterns that
           emerged with the purposes of capitalizing on prey availability and/or
           predator evasion will encounter tradeoffs with changing physical habitat preferences."),

        # Central Display - takes html:
        # # Plotly works here:
        card_image(file = "dash_img/haddock_change_plot.png")

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Projected species distributions are centered at points in time when the region wide SST's
      cross 1C temperature thresholds. Distribution models assume no adaptive/genetic shifts
      in thermal preference.")
  ) # Close the card

```


## 6. Observed Species Environmental Preferences





```{r}
##### C. Species Preference Information  ####
pref_data <- read_csv(
  file = here::here("Coca_SDM_app_dev/app_ready_data/preference_curve_data.csv"),
  col_types = list(
    comname = col_character(),
    variable = col_character(),
    val_z = col_double(),
    val_actual = col_double(),
    fit_exp = col_double()))  %>% 
 filter(tolower(comname) == tolower(input$in_species))



#### D.  Environmental Conditions  ####
env_condition_data <- read_csv(
  file = here::here("Coca_SDM_app_dev/app_ready_data/projected_environmental_conditions.csv"),
  col_types = cols(
    scenario = col_character(),
    region = col_character(),
    variable = col_character(),
    ref_period = col_character(),
    temp_horizon = col_character(),
    val = col_double())) %>% 
  mutate(region = factor(region, levels = c("Scotian Shelf", "Gulf of Maine", "Georges Bank", "Mid-Atlantic Bight")))
```






```{r}
# Set User selection options

# This is a good crosstalk opportunity:
# Pick the different temperature thresholds, have it change where the preferences align
# Would also be cool to do two different species at once to show one leaving and one emerging


#----- apply selections and filter -----
# Build dataframe to plot


# Build the dataset we need for the preference plot using inputs
# a. conditions
cond_x <- filter(
  env_condition_data, 
  scenario == str_remove(input$in_scenario, "CMIP6_"), 
  #temp_horizon == input$in_horizon
  temp_horizon %in% c("1C", "2C", "3C"))


# b. preferences
prefs_x <- pref_data %>% filter(comname == input$in_species) 

# build out regions
prefs_x <- bind_rows(list(
  mutate(prefs_x, region = "Gulf of Maine"),
  mutate(prefs_x, region = "Georges Bank"),
  mutate(prefs_x, region = "Scotian Shelf"),
  mutate(prefs_x, region = "Mid-Atlantic Bight"))) %>% 
  mutate(region = factor(region, levels = c("Scotian Shelf", "Gulf of Maine", "Georges Bank", "Mid-Atlantic Bight")))

# Join them:
df <- left_join(prefs_x, cond_x)
```




```{r}
#Build the figure:

curve_dat <- df %>% filter(
  region == "Gulf of Maine"#, 
  #variable != "Depth",
  #variable == "Surface Temperature"
  )


# Get scenario/horizon from the data so we don't need to feed so many inputs
one_rec  <-  curve_dat %>% drop_na() %>%  slice(1)
species  <- one_rec %>% pull(comname)


# Inputs that change:
scenario <- one_rec %>% pull(scenario)
horizon  <- one_rec %>% pull(temp_horizon)
period  <- one_rec %>% pull(ref_period)

# Tidy text
horizon <- str_c("+",str_sub(horizon, 1,-2), deg_c)
scenario <- ifelse(scenario == "SSP1_26", "SSP1-2.6", "SSP5-8.5")

# Make the plot
curve_dat <- curve_dat %>% mutate(temp_horizon = str_c("+",str_sub(temp_horizon, 1,-2), deg_c))

# Get a distinct combo for labels so they only plot once
dlabs <- filter(curve_dat, variable == "Depth") %>% distinct(region, variable, val)
vlabs <- filter(curve_dat, variable != "Depth") %>% distinct(region,variable, val, temp_horizon)



# and plot
pref_plot <- curve_dat %>% 
  mutate(variable = factor(variable, levels = c("Surface Temperature", "Bottom Temperature", "Depth"))) %>% 
    ggplot() +
    # Mark the preference curves
    geom_ribbon(
      aes(x = val_actual, ymin = 0, ymax = fit_exp), 
      color = "transparent", alpha = 0.3, fill = gmri_cols("teal")) +
    geom_line(
      aes(val_actual, fit_exp, group = comname), linewidth = 1) +
    # Label the regional averages
    geom_vline(
      data = vlabs,
      aes(xintercept = val, color = temp_horizon),
      linewidth = 1.2, key_glyph = draw_key_rect) +
    geom_label(
      data = vlabs, 
      aes(x = val, y = I(.35), color = temp_horizon, label = temp_horizon), 
      key_glyph = draw_key_rect, 
      size = 4, 
      label.size = 1,
      family = "Avenir",
      label.padding = unit(0.6, "lines"), 
      label.r = unit(0.5, "lines")) +
  geom_vline(
      data = dlabs, aes(xintercept = val), linewidth = 1.2) +
  geom_label(
      data = dlabs, 
      aes(x = val, y = I(.35), label = round(val, 0)), 
      size = 4, 
      label.size = 1,
      family = "Avenir",
      label.padding = unit(0.6, "lines"), 
      label.r = unit(0.5, "lines")) +
    scale_color_manual(
      #values = gmri_cols("orange"), 
      values = RColorBrewer::brewer.pal(3, "Reds"), 
      na.translate = F) +
    facet_wrap(
      ~variable, 
      ncol = 1,
      scales = "free") +
    scale_x_continuous(
      expand = expansion(add = c(-3,-3))#, labels = label_number(suffix = deg_c)
        ) +
    scale_y_continuous(expand = expansion(mult = c(0,.4))) +
    guides(
      color = guide_legend(override.aes = list(
        fill = RColorBrewer::brewer.pal(3, "Reds")))) +
    theme_plot() +
  theme(axis.text.x = element_text(angle = 0, family = "Avenir", hjust = 0.5, vjust = 0.1)) +
    labs(
      title = str_c(str_to_title(species), " Habitat Preferences with Projected Climate Conditions"), 
      subtitle = str_c("Projected Climate from: ", scenario),
      color = "Projected Conditions for a Climate with SST's of:  ",
      x = "Value", 
      y = "Biomass Density kg/km2")



# # Save
# showtext::showtext_opts(dpi=300)
# ggsave(
#   plot = pref_plot,
#   filename = here::here("R/static_dash_testing/dash_img/haddock_pref_plot.png"),
#   dpi = 300,
#   bg = "white",
#   width = 5.4,
#   height = 3.5,
#   units = "in", scale = 2)


```


```{r}
#| label: haddock-pref-card


# 1. Content Card from shiny modules:

# Build the card to contain everything
  card(

    # Card Header Contents
    card_header(
      #class = "bg-dark",
      "Species Distribution Changes Based on Actual Thermal Preferences"),

    # Card Body Content
    card_body(

      # Headline text above the plot -
      #can be swapped with textoutput to be reactive
      markdown("Gulf of Maine Haddock Preferences Facing Projected Climates:"),

      # This is where the focal element goes:
      card_body(
        p("Haddock is an important fish species found in the cooler waters
          off the Coast of New England. They serve an important role ecologically
          and they support a regional fishery and commonly eaten as
          fried fish fillets."),
        p("Leveraging over 50 years of NOAA Survey data,
          scientists can quantify the relationship between haddock abundance
          and the temperatures where they are caught. When average 
          temperatures from projected climates 
          are overlayed, we can see whether conditions
          are more/less favorable with respect to those
          preferences."),
         p("Leveraging over 50 years of NOAA Survey data,
          scientists can quantify the relationship between haddock abundance
          and the temperatures where they are caught. When average 
          temperatures from projected climates 
          are overlayed, we can see whether conditions
          are more/less favorable with respect to those
          preferences."),
        

        # Central Display - takes html:
        # # Plotly works here:
        card_image(file = "dash_img/haddock_pref_plot.png")

      ) # Close cardbody
    ), # Close cardbody

    # Footer information should be a module if dynamic
    card_footer(
      class = "fs-6",
      "Species preferences are determined based on their observed population density differences with changes in environmental conditions.")
  ) # Close the card

```





## 7. Region-Specific Seasonal Outlooks



```{r}
#| eval: false

# Modify the following function to be a plotly figure, put it in a card

timeseries_data <- density_timeseries %>% 
          filter(species ==  input$in_species) %>% 
          dplyr::filter(
            scenario == input$in_scenario,
            year>2019) %>% 
          mutate(temp_horizon = input$in_horizon)


#### Average Density Timelines  ####
# ssp_projected_timeseries <- function(timeseries_data, reactive = F){
#   
ssp_projected_timeseries(timeseries_data = timeseries_data, reactive = F)


```


```{r}
#| eval: false

# p("By taking local conditions from these ensemble climate                  scenarios, and plugging them into species distribution models,
#           scientists can begin to understand the degree to which species
#           may respond to changes in the physical environment under
#           projected climate change.")
```



### Community Angle?
